start_nu = 1    #the first trajectory
end_nu = 1000   #the last trajectory

###Please ignore these parameters, which are related to the dynamics simulation.
auto =      
limit_end = 
total_avail_cores =
single_task_num_cores =
work_limit =
backup_queue0 = 
backup_node0 = 
backup_run_num0 =  
queue_node_num = 
n_pro = 4
restart = 0
###

optgjf = freq.gjf   ###Gaussian opt template 


step = 3000  # the total steps of the dynamics simulation 



all_dir = /data/home/zhuyf/all_work/  # main path

jade_patch_dir = /data/home/zhuyf/homemade_jade_patch/jp6_test/  # the path of codes



###Descriptors
S0_involve = yes   #whether it contains atoms or not

remake_after_block = no    #perform further analysis based on the block?
remake_after_cluster = yes #perform further analysis based on the cluster?

#([remake_block]: This parameter is only used in pca_4_1.py. Specific numbers or None.( e.g.:remake_block = 1,2,4/remake_block =None))
remake_block = 1
#([remake_operate_nu]: Only one block can be divided at the same time. So it can only be one number.)
#And both partition_5.py and cluster_all.py use this parameter!
remake_operate_nu = 1


#Remove Option
#([remove_list]: The number of the atom you want to removeï¼ˆe.g.:remove_list = 6,9 or None))
#([keep_list]: The number of the atom you want to retain.
#At least one of the two options is [None]
remove_list = none
keep_list = 6,9
#

#([structural_descriptor]:
# D - Dihedral_angle; B - Bond_length; A - Angle; H is to indicate whether it contains H atoms.
# {'d':'D', 'hd':'H_D', 'a':'A', 'ha':'H_A', 'r':'R', 'hr':'H_R'})
structural_descriptor = a

Coulomb_matrix = no

#Dimension reduction methods
#1 PCA
PCA = yes
#[eg: pca_n_components = mle or a int]
pca_n_components = 3
pca_main_dim_nu = 3
#PCA plot option
# 0 - no
# 1 - yes
# 2 - yes and show
plot_2D = 1
plot_3D = 1
plot_components = 1
plot_variance_ratio = 1
#2 classical MDS
classical_MDS = yes
dimension_of_classical_mds = 2
#3 Isomap
Isomap = no
dimension_of_Isomap = 2
n_neighbors = 5


###partition_5.py & cluster_all.py
#
#The following parameters are used for both .py codes
partition_descriptor = D
partition_method = PCA
first_dim = 1
second_dim =2

#
#The following parameters are only used for partition_5.py
nu_block = 1

xmin1=150
xmax1=360
ymin1=-360
ymax1=360

xmin2=-40
xmax2=80
ymin2=-360
ymax2=360

xmin3=-100
xmax3=100
ymin3=240
ymax3=340

#Available methods(abbreviation):
# Kmeans(km) / MiniBatchKmeans(mb) / MeansShift(ms) / AffinityPropagation(ap) /
# DBSCAN(db) / OPTICS(op) / BIRCH(bi) / HierarchicalClustering(hi)
cluster_method = hi


###chirality_6.py
Chirality = yes
#([Chiral_basis]:Chiral rotation is carried out on the basis of clustering(d) or partition(p))
# D - Dihedral_angle; B - Bond_length; A - Angle; H is to indicate whether it contains H atoms.
# {'d':'D', 'hd':'H_D', 'a':'A', 'ha':'H_A', 'r':'R', 'hr':'H_R'})
Chiral_basis = d
#([Cjiral_block]: e.g.- Chiral_block = 1,4,5)
Chiral_block = 1

##Bootstrapping
# D - Dihedral_angle; B - Bond_length; A - Angle; H is to indicate whether it contains H atoms.
# {'d':'D', 'hd':'H_D', 'a':'A', 'ha':'H_A', 'r':'R', 'hr':'H_R'})
cycle_time = 100
